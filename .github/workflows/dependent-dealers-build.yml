name: .NET

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:
env:
  USER_NAME: Shubham is running this action.
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  # build:

  #   runs-on: windows-latest

  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Setup .NET
  #     uses: actions/setup-dotnet@v2
  #     with:
  #       dotnet-version: 6.0.x
  #   - name: Restore dependencies
  #     run: dotnet restore
  #   - name: Build
  #     run: dotnet build --no-restore
  #   - name: Test
  #     run: dotnet test --no-build --verbosity normal
  
  create-new-branch:

    runs-on: windows-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Install AWS CLI
      run: Install-Module -Name AWS.Tools.Installer -Force
    - name: Install Lambda Tools
      run: dotnet tool install -g Amazon.Lambda.Tools
    - name: Build
      run: dotnet build
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        role-to-assume: arn:aws:iam::407672363742:role/cai-managed/private/Admin
        role-external-id: ${{ secrets.AWS_ROLE_EXTERNAL_ID }}
        role-duration-seconds: 1200
        role-session-name: MySessionName
    # - name: List directory
    #   run: |
    #     ls
    #     cd ./LambdaProvider
    #     ls
    #     dotnet lambda deploy-function FunctionHandler
    #     ls
    #     cd ./bin/Release/net6.0
    #     ls
    # - name: Install Touch Framework
    #   run: npm install touch-cli -g
    # - name: Check if branch already exists
    #   env: 
    #     LOCAL_ENV: Local Env is very easy.
    #   run: |
    #     echo "COMMIT_ID = $(git ls-remote --heads origin master)" >> $GITHUB_ENV
    #     echo "Global message is: $USER_NAME"
    #     echo "Local message is: $LOCAL_ENV"
    #     echo "Commit Id is: $COMMIT_ID"

    # - name: Create feature branch
    #   run: git checkout -b feature/engine_upgrade
    # - name: Initialize mandatory git config
    #   run: |
    #    git config user.name "GitHub Actions"
    #    git config user.email noreply@github.com
    # - name: Commit changelog and manifest files
    #   id: make-commit
    #   run: |
    #     touch initial
    #     git add initial
    #     git commit --m "Prepare release"
    #     git push --set-upstream origin feature/engine_upgrade
    # - name: Push new branch
    #   run: git push
